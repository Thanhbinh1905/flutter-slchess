import 'dart:async';
import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:amplify_flutter/amplify_flutter.dart';
import 'package:amplify_auth_cognito/amplify_auth_cognito.dart';
import 'package:flutter_slchess/core/config/amplifyconfiguration.dart'
    as app_config;
import 'package:flutter_slchess/main.dart';
import './user_service.dart';
import './puzzle_service.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';

class AmplifyAuthService {
  static final AmplifyAuthService _instance = AmplifyAuthService._internal();
  final FlutterSecureStorage _storage = const FlutterSecureStorage();
  final UserService _userService = UserService();
  final PuzzleService _puzzleService = PuzzleService();
  bool _isInitialized = false;

  // Constants cho secure storage
  static const String ACCESS_TOKEN_KEY = "ACCESS_TOKEN";
  static const String ID_TOKEN_KEY = "ID_TOKEN";
  static const String REFRESH_TOKEN_KEY = "REFRESH_TOKEN";

  factory AmplifyAuthService() {
    return _instance;
  }

  AmplifyAuthService._internal();

  Future<void> initializeAmplify() async {
    if (_isInitialized) {
      safePrint('Amplify ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc ƒë√≥, b·ªè qua');
      return;
    }

    try {
      // Ki·ªÉm tra xem Amplify ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh ch∆∞a
      bool needConfiguration = !Amplify.isConfigured;

      // Th√™m Auth plugin - lu√¥n th·ª≠ th√™m tr∆∞·ªõc khi c·∫•u h√¨nh
      final auth = AmplifyAuthCognito();
      bool pluginAdded = false;

      try {
        if (!Amplify.isConfigured) {
          await Amplify.addPlugin(auth);
          pluginAdded = true;
          safePrint('ƒê√£ th√™m Auth plugin th√†nh c√¥ng');
        } else {
          // ƒê·ªëi v·ªõi Amplify ƒë√£ c·∫•u h√¨nh, ki·ªÉm tra n·∫øu Auth plugin ƒë√£ ƒë∆∞·ª£c th√™m
          try {
            // Th·ª≠ g·ªçi m·ªôt API c·ªßa Auth ƒë·ªÉ ki·ªÉm tra n·∫øu plugin ƒë√£ ƒë∆∞·ª£c th√™m
            await Amplify.Auth.fetchAuthSession();
            pluginAdded = true;
            safePrint('Auth plugin ƒë√£ t·ªìn t·∫°i');
          } catch (e) {
            if (e.toString().contains('Auth plugin has not been added')) {
              safePrint(
                  'L·ªói: Auth plugin ch∆∞a ƒë∆∞·ª£c th√™m v√†o Amplify ƒë√£ c·∫•u h√¨nh');
              // Kh√¥ng th·ªÉ th√™m plugin v√†o Amplify ƒë√£ c·∫•u h√¨nh
              // C·∫ßn reset Amplify ho·∫∑c kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng
              throw Exception(
                  'Kh√¥ng th·ªÉ th√™m Auth plugin v√†o Amplify ƒë√£ c·∫•u h√¨nh. C·∫ßn kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng.');
            } else {
              // L·ªói kh√°c khi ki·ªÉm tra Auth plugin
              rethrow;
            }
          }
        }
      } catch (e) {
        if (e.toString().contains('has already been added')) {
          safePrint('Auth plugin ƒë√£ ƒë∆∞·ª£c th√™m tr∆∞·ªõc ƒë√≥');
          pluginAdded = true;
        } else if (!e.toString().contains('Kh√¥ng th·ªÉ th√™m Auth plugin')) {
          // N·∫øu kh√¥ng ph·∫£i l·ªói "kh√¥ng th·ªÉ th√™m plugin", n√©m l·∫°i l·ªói
          rethrow;
        }
      }

      // N·∫øu plugin ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng v√† c·∫ßn c·∫•u h√¨nh
      if (pluginAdded && needConfiguration) {
        // L·∫•y th√¥ng tin c·∫•u h√¨nh t·ª´ .env
        final cognitoUrl = dotenv.env['COGNITO_URL'];
        final cognitoClientId = dotenv.env['COGNITO_CLIENT_ID'];

        if (cognitoUrl == null || cognitoClientId == null) {
          throw Exception('Thi·∫øu th√¥ng tin c·∫•u h√¨nh Cognito trong file .env');
        }

        // Tr√≠ch xu·∫•t region t·ª´ URL Cognito
        String region = 'ap-southeast-2'; // M·∫∑c ƒë·ªãnh
        final regionRegex = RegExp(r'auth\.([a-z0-9-]+)\.amazoncognito');
        final regionMatch = regionRegex.firstMatch(cognitoUrl);
        if (regionMatch != null && regionMatch.groupCount >= 1) {
          region = regionMatch.group(1) ?? region;
        }

        // T·∫°o User Pool ID t·ª´ URL v√† region
        final domainParts = cognitoUrl.split('.');
        String userPoolId = "";
        if (domainParts.isNotEmpty) {
          userPoolId = "${region}_${domainParts[0]}";
        } else {
          throw Exception('Kh√¥ng th·ªÉ x√°c ƒë·ªãnh User Pool ID t·ª´ Cognito URL');
        }

        // Thi·∫øt l·∫≠p ƒë∆∞·ªùng d·∫´n chuy·ªÉn h∆∞·ªõng ph√π h·ª£p v·ªõi n·ªÅn t·∫£ng
        String signInRedirectURI;
        String signOutRedirectURI;

        if (kIsWeb) {
          // Web
          signInRedirectURI = '${Uri.base.origin}/callback';
          signOutRedirectURI = '${Uri.base.origin}/signout';
        } else {
          // Mobile
          signInRedirectURI = 'slchess://callback/';
          signOutRedirectURI = 'slchess://signout/';
        }

        // C·∫•u h√¨nh JSON cho Amplify
        final jsonConfig = {
          "UserAgent": "aws-amplify-cli/2.0",
          "Version": "1.0",
          "auth": {
            "plugins": {
              "awsCognitoAuthPlugin": {
                "UserAgent": "aws-amplify/cli",
                "Version": "0.1.0",
                "IdentityManager": {"Default": {}},
                "CognitoUserPool": {
                  "Default": {
                    "PoolId": userPoolId,
                    "AppClientId": cognitoClientId,
                    "Region": region
                  }
                },
                "Auth": {
                  "Default": {
                    "authenticationFlowType": "USER_SRP_AUTH",
                    "OAuth": {
                      "WebDomain": cognitoUrl,
                      "AppClientId": cognitoClientId,
                      "SignInRedirectURI": signInRedirectURI,
                      "SignOutRedirectURI": signOutRedirectURI,
                      "Scopes": [
                        "email",
                        "openid",
                        "phone",
                        "aws.cognito.signin.user.admin"
                      ]
                    }
                  }
                }
              }
            }
          }
        };

        // In th√¥ng tin c·∫•u h√¨nh scopes
        final scopes = (jsonConfig["auth"] as Map)["plugins"] as Map;
        final cognitoPlugin = scopes["awsCognitoAuthPlugin"] as Map;
        final authConfig = cognitoPlugin["Auth"] as Map;
        final defaultAuth = authConfig["Default"] as Map;
        final oauth = defaultAuth["OAuth"] as Map;
        final configuredScopes = oauth["Scopes"] as List;
        safePrint('ƒê√£ c·∫•u h√¨nh Amplify v·ªõi c√°c scopes: $configuredScopes');

        try {
          // C·ªë g·∫Øng c·∫•u h√¨nh Amplify
          await Amplify.configure(jsonEncode(jsonConfig));
          safePrint('ƒê√£ c·∫•u h√¨nh Amplify th√†nh c√¥ng');

          // Ki·ªÉm tra xem Auth plugin c√≥ ho·∫°t ƒë·ªông kh√¥ng
          try {
            await Amplify.Auth.fetchAuthSession();
            safePrint('Auth plugin ho·∫°t ƒë·ªông t·ªët');
          } catch (e) {
            safePrint('L·ªói khi ki·ªÉm tra Auth plugin: $e');
            throw Exception('Auth plugin kh√¥ng ho·∫°t ƒë·ªông sau khi c·∫•u h√¨nh: $e');
          }
        } catch (e) {
          if (e.toString().contains('already been configured')) {
            safePrint(
                'Amplify ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh tr∆∞·ªõc ƒë√≥, ƒë√°nh d·∫•u l√† ƒë√£ kh·ªüi t·∫°o');
          } else {
            rethrow;
          }
        }
      } else if (!pluginAdded) {
        throw Exception('Kh√¥ng th·ªÉ th√™m Auth plugin v√†o Amplify');
      } else if (Amplify.isConfigured) {
        safePrint('Amplify ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh, kh√¥ng c·∫ßn c·∫•u h√¨nh l·∫°i');
      }

      _isInitialized = true;
      safePrint('Amplify ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng üéâ');
    } on AmplifyException catch (e) {
      safePrint('L·ªói AmplifyException khi kh·ªüi t·∫°o Amplify: ${e.message}');
      // Ki·ªÉm tra xem c√≥ ph·∫£i l·ªói "ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh" kh√¥ng
      if (e.message.contains('already been configured')) {
        _isInitialized = true;
        safePrint('ƒê√°nh d·∫•u Amplify ƒë√£ kh·ªüi t·∫°o do ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh tr∆∞·ªõc ƒë√≥');
        return; // Kh√¥ng n√©m exception n·∫øu ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh
      }
      throw Exception(
          'L·ªói AmplifyException khi kh·ªüi t·∫°o Amplify: ${e.message}');
    } catch (e) {
      safePrint('L·ªói kh√¥ng x√°c ƒë·ªãnh khi kh·ªüi t·∫°o Amplify: $e');
      // Ki·ªÉm tra xem c√≥ ph·∫£i l·ªói "ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh" kh√¥ng
      if (e.toString().contains('already been configured')) {
        _isInitialized = true;
        safePrint('ƒê√°nh d·∫•u Amplify ƒë√£ kh·ªüi t·∫°o do ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh tr∆∞·ªõc ƒë√≥');
        return; // Kh√¥ng n√©m exception n·∫øu ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh
      }
      throw Exception('L·ªói kh√¥ng x√°c ƒë·ªãnh khi kh·ªüi t·∫°o Amplify: $e');
    }
  }

  // Ph∆∞∆°ng th·ª©c public ƒë·ªÉ truy c·∫≠p t·ª´ b√™n ngo√†i
  Future<void> fetchAndSaveUserInfo() async {
    return _fetchAndSaveUserInfo();
  }

  // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng sau khi ƒëƒÉng nh·∫≠p
  Future<void> _fetchAndSaveUserInfo() async {
    try {
      final session =
          await Amplify.Auth.fetchAuthSession() as CognitoAuthSession;

      // Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
      if (session.isSignedIn) {
        safePrint("User ƒë√£ ƒëƒÉng nh·∫≠p, l·∫•y th√¥ng tin token");

        // L·∫•y token t·ª´ Cognito
        final tokens = session.userPoolTokensResult.value;

        // L·∫•y token g·ªëc t·ª´ ƒë·ªëi t∆∞·ª£ng JWT
        String? accessTokenStr = tokens.accessToken.raw;
        String? idTokenStr = tokens.idToken.raw;
        String? refreshTokenStr = tokens.refreshToken;

        // L∆∞u token v√†o secure storage
        await _storage.write(key: ACCESS_TOKEN_KEY, value: accessTokenStr);
        await _storage.write(key: ID_TOKEN_KEY, value: idTokenStr);
        await _storage.write(key: REFRESH_TOKEN_KEY, value: refreshTokenStr);

        safePrint("ƒê√£ l∆∞u c√°c token th√†nh c√¥ng");

        // Debug: in ra m·ªôt ph·∫ßn c·ªßa token ƒë·ªÉ ki·ªÉm tra
        safePrint(
            "Access Token (partial): ${accessTokenStr.substring(0, 20)}...");
        safePrint("ID Token (partial): ${idTokenStr.substring(0, 20)}...");

        // X√≥a b·ªô nh·ªõ cache c√¢u ƒë·ªë
        await _puzzleService.clearAllPuzzleCaches();

        // L∆∞u th√¥ng tin ng∆∞·ªùi d√πng b·∫±ng access token
        await _userService.saveSelfUserInfo(accessTokenStr, idTokenStr);
      } else {
        safePrint("Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p");
      }
    } catch (e) {
      safePrint("L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng: $e");
    }
  }

  // X·ª≠ l√Ω chu·ªói token n·∫øu n√≥ c√≥ ƒë·ªãnh d·∫°ng JSON
  String _processTokenString(String tokenStr) {
    // Ki·ªÉm tra xem token c√≥ ph·∫£i l√† m·ªôt ƒë·ªëi t∆∞·ª£ng JSON
    if (tokenStr.trim().startsWith('{') && tokenStr.trim().endsWith('}')) {
      safePrint("Token c√≥ ƒë·ªãnh d·∫°ng JSON, x·ª≠ l√Ω ƒë·∫∑c bi·ªát");

      try {
        // N·∫øu l√† JSON, tr·∫£ v·ªÅ m·ªôt token c·ªë ƒë·ªãnh (trong m√¥i tr∆∞·ªùng th·ª±c t·∫ø, c·∫ßn x·ª≠ l√Ω t·ªët h∆°n)
        return "eyJraWQiOiJkRXlGcVFoZUNBQnlOVzlpRWFIdFpKUUM0XC9OZXJrbU9aQUJWYzJpcHdUTT0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJhOThlMzQxOC1iMDkxLTcwNzMtZGNhYS1mMGQ0ZmFiNGFjMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuYXAtc291dGhlYXN0LTIuYW1hem9uYXdzLmNvbVwvYXAtc291dGhlYXN0LTJfYm5rSExrNEl5IiwidmVyc2lvbiI6MiwiY2xpZW50X2lkIjoiYTc0Mmtpa2ludWdydW1oMTgzbWhqYTduZiIsIm9yaWdpbl9qdGkiOiIyYzJjN2FmZC1mODA0LTQxZTEtOGNiOC1mMmZlMGUwYjQ2MzMiLCJ0b2tlbl91c2UiOiJhY2Nlc3MiLCJzY29wZSI6InBob25lIG9wZW5pZCBwcm9maWxlIGVtYWlsIiwiYXV0aF90aW1lIjoxNzQzNzY2OTgwLCJleHAiOjE3NDM4NTMzODAsImlhdCI6MTc0Mzc2Njk4MCwianRpIjoiZGFiMjBjMjYtMmFkNy00YWI4LWIxZjYtZTY0OTVjZjdlYTJmIiwidXNlcm5hbWUiOiJ0ZXN0dXNlcjIifQ";
      } catch (e) {
        safePrint("L·ªói khi x·ª≠ l√Ω token JSON: $e");
      }
    }

    // Tr·∫£ v·ªÅ token g·ªëc n·∫øu kh√¥ng c√≥ v·∫•n ƒë·ªÅ
    return tokenStr;
  }

  // Ki·ªÉm tra xem token ƒë√£ h·∫øt h·∫°n ch∆∞a
  Future<bool> isTokenExpired(String token) async {
    try {
      // Ph√¢n t√≠ch token JWT
      final parts = token.split('.');
      if (parts.length != 3) {
        safePrint('Token kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng JWT');
        return true; // Coi nh∆∞ token ƒë√£ h·∫øt h·∫°n n·∫øu sai ƒë·ªãnh d·∫°ng
      }

      // Gi·∫£i m√£ ph·∫ßn payload (ph·∫ßn th·ª© 2)
      String normalizedPayload = base64Url.normalize(parts[1]);
      final payloadJson = utf8.decode(base64Url.decode(normalizedPayload));
      final payload = jsonDecode(payloadJson);

      // Ki·ªÉm tra th·ªùi gian h·∫øt h·∫°n
      if (payload.containsKey('exp')) {
        final exp = payload['exp'];
        final expiryDateTime = DateTime.fromMillisecondsSinceEpoch(exp * 1000);
        final currentTime = DateTime.now();

        safePrint('Token h·∫øt h·∫°n v√†o: $expiryDateTime');
        safePrint('Th·ªùi gian hi·ªán t·∫°i: $currentTime');

        return currentTime.isAfter(expiryDateTime);
      } else {
        safePrint('Token kh√¥ng c√≥ th√¥ng tin h·∫øt h·∫°n');
        return true; // Coi nh∆∞ token ƒë√£ h·∫øt h·∫°n n·∫øu kh√¥ng c√≥ th√¥ng tin
      }
    } catch (e) {
      safePrint('L·ªói khi ki·ªÉm tra h·∫°n token: $e');
      return true; // Coi nh∆∞ token ƒë√£ h·∫øt h·∫°n n·∫øu c√≥ l·ªói
    }
  }

  // Th·ª±c hi·ªán ƒëƒÉng nh·∫≠p v·ªõi giao di·ªán Amplify
  Future<void> signIn(BuildContext context) async {
    try {
      await Amplify.Auth.signInWithWebUI();
      navigateToHome();
    } catch (e) {
      String errorMessage = 'L·ªói ƒëƒÉng nh·∫≠p';

      if (e.toString().contains('No browser available')) {
        errorMessage =
            'Kh√¥ng t√¨m th·∫•y tr√¨nh duy·ªát. Vui l√≤ng c√†i ƒë·∫∑t tr√¨nh duy·ªát web (Chrome, Firefox,...) v√† th·ª≠ l·∫°i.';
      }

      if (context.mounted) {
        showDialog(
          context: context,
          builder: (BuildContext context) {
            return AlertDialog(
              title: const Text('L·ªói'),
              content: Text(errorMessage),
              actions: [
                TextButton(
                  onPressed: () => Navigator.of(context).pop(),
                  child: const Text('ƒê√≥ng'),
                ),
              ],
            );
          },
        );
      }
      safePrint('L·ªói ƒëƒÉng nh·∫≠p: $e');
    }
  }

  Future<void> signOut() async {
    try {
      // X√≥a token v√† th√¥ng tin ng∆∞·ªùi d√πng
      await _storage.delete(key: ACCESS_TOKEN_KEY);
      await _storage.delete(key: ID_TOKEN_KEY);
      await _storage.delete(key: REFRESH_TOKEN_KEY);
      await _userService.clearUserData();

      // B·ªè qua vi·ªác g·ªçi Amplify.Auth.signOut() ƒë·ªÉ tr√°nh chuy·ªÉn h∆∞·ªõng web
      await Amplify.Auth.signOut(
        options: const SignOutOptions(globalSignOut: false),
      );

      // Chuy·ªÉn v·ªÅ m√†n h√¨nh ƒëƒÉng nh·∫≠p
      if (navigatorKey.currentContext != null) {
        Navigator.pushNamedAndRemoveUntil(
          navigatorKey.currentContext!,
          '/login',
          (route) => false,
        );
      }
    } catch (e) {
      safePrint('L·ªói ƒëƒÉng xu·∫•t: $e');
      // N·∫øu c√≥ l·ªói, v·∫´n c·ªë g·∫Øng chuy·ªÉn v·ªÅ m√†n h√¨nh ƒëƒÉng nh·∫≠p
      if (navigatorKey.currentContext != null) {
        Navigator.pushNamedAndRemoveUntil(
          navigatorKey.currentContext!,
          '/login',
          (route) => false,
        );
      }
    }
  }

  Future<bool> isSignedIn() async {
    try {
      final session = await Amplify.Auth.fetchAuthSession();
      return session.isSignedIn;
    } catch (e) {
      return false;
    }
  }

  void navigateToHome() {
    Navigator.pushReplacementNamed(
      navigatorKey.currentContext!,
      '/home',
    );
  }

  Future<String?> getAccessToken() async {
    return _storage.read(key: ACCESS_TOKEN_KEY);
  }

  Future<String?> getIdToken() async {
    return _storage.read(key: ID_TOKEN_KEY);
  }

  Future<String?> getRefreshToken() async {
    return _storage.read(key: REFRESH_TOKEN_KEY);
  }

  // Ph∆∞∆°ng th·ª©c thay ƒë·ªïi m·∫≠t kh·∫©u
  Future<bool> changePassword(String oldPassword, String newPassword) async {
    try {
      await Amplify.Auth.updatePassword(
        oldPassword: oldPassword,
        newPassword: newPassword,
      );
      return true;
    } on AmplifyException catch (e) {
      safePrint('L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u: ${e.message}');

      // X·ª≠ l√Ω l·ªói thi·∫øu quy·ªÅn
      if (e.message.contains('Access Token does not have required scopes')) {
        // Th√¥ng b√°o l·ªói r√µ r√†ng h∆°n
        throw Exception(
            'Kh√¥ng c√≥ ƒë·ªß quy·ªÅn ƒë·ªÉ ƒë·ªïi m·∫≠t kh·∫©u. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i v·ªõi ƒë·∫ßy ƒë·ªß quy·ªÅn.');
      }

      throw Exception('L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u: ${e.message}');
    } catch (e) {
      safePrint('L·ªói kh√¥ng x√°c ƒë·ªãnh khi ƒë·ªïi m·∫≠t kh·∫©u: $e');
      throw Exception('L·ªói kh√¥ng x√°c ƒë·ªãnh khi ƒë·ªïi m·∫≠t kh·∫©u: $e');
    }
  }

  // Ph∆∞∆°ng th·ª©c ƒë·ªïi m·∫≠t kh·∫©u th√¥ng qua ƒëƒÉng nh·∫≠p l·∫°i
  Future<bool> changePasswordWithReauthentication(
      BuildContext context, String oldPassword, String newPassword) async {
    try {
      // ƒêƒÉng xu·∫•t tr∆∞·ªõc ƒë·ªÉ l√†m m·ªõi token
      await signOut();

      // Hi·ªÉn th·ªã th√¥ng b√°o
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ ƒë·ªïi m·∫≠t kh·∫©u')),
      );

      // Chuy·ªÉn v·ªÅ m√†n h√¨nh ƒëƒÉng nh·∫≠p
      Navigator.pushReplacementNamed(
        navigatorKey.currentContext!,
        '/login',
      );

      return false; // Ch∆∞a th·ª±c hi·ªán ƒë·ªïi m·∫≠t kh·∫©u
    } catch (e) {
      safePrint('L·ªói khi chu·∫©n b·ªã ƒë·ªïi m·∫≠t kh·∫©u: $e');
      throw Exception('L·ªói khi chu·∫©n b·ªã ƒë·ªïi m·∫≠t kh·∫©u: $e');
    }
  }
}
