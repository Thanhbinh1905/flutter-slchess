import 'package:flutter_slchess/core/models/user.dart';
import 'package:http/http.dart' as http;
import 'package:hive/hive.dart';
import '../constants/constants.dart';
import '../models/puzzle_model.dart';
import '../services/user_service.dart';
import 'dart:convert';

class PuzzleService {
  static String getPuzzlesUrlApi = ApiConstants.getPulzzesUrl;
  static String getPuzzleUrlApi = ApiConstants.getPulzzeUrl;
  static String getPuzzleProfileUrlApi = "${ApiConstants.getPulzzeUrl}/profile";

  Future<Puzzles> getPuzzles(String idToken, {int limit = 10}) async {
    try {
      final response = await http.get(
        Uri.parse("$getPuzzlesUrlApi?limit=$limit"),
        headers: {'Authorization': idToken},
      );

      if (response.statusCode == 200) {
        final Map<String, dynamic> responseData = jsonDecode(response.body);
        final puzzles = Puzzles.fromJson(responseData);

        // ‚úÖ L∆∞u cache sau khi fetch
        await _cachePuzzles(puzzles.puzzles);

        return puzzles;
      } else {
        throw Exception('Kh√¥ng th·ªÉ l·∫•y puzzles: ${response.statusCode}');
      }
    } catch (error) {
      print("L·ªói khi g·ªçi API, th·ª≠ l·∫•y t·ª´ cache...");

      // ‚úÖ N·∫øu l·ªói, load t·ª´ cache
      final cached = await _getCachedPuzzles();
      if (cached.isNotEmpty) {
        return Puzzles(puzzles: cached);
      }

      throw Exception('Kh√¥ng th·ªÉ l·∫•y puzzle: $error');
    }
  }

  // üß† Cache puzzles
  Future<void> _cachePuzzles(List<Puzzle> puzzles) async {
    final box = await Hive.openBox<Puzzle>('puzzleBox');
    await box.clear(); // optional: xo√° c≈©
    for (var puzzle in puzzles) {
      await box.put(puzzle.puzzleId, puzzle);
    }
  }

  // üì¶ L·∫•y puzzle t·ª´ cache n·∫øu c·∫ßn
  Future<List<Puzzle>> _getCachedPuzzles() async {
    final box = await Hive.openBox<Puzzle>('puzzleBox');
    return box.values.toList();
  }

  // üîë L·∫•y 1 puzzle t·ª´ cache, n·∫øu kh√¥ng c√≥ th√¨ g·ªçi API v√† t·∫°o l·∫°i cache
  Future<Puzzles> getPuzzleFromCacheOrApi(String idToken) async {
    try {
      // Ki·ªÉm tra xem Hive ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ch∆∞a
      if (!Hive.isBoxOpen('puzzleBox')) {
        // ƒê·∫£m b·∫£o Hive ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc khi m·ªü box
        try {
          await Hive.openBox<Puzzle>('puzzleBox');
        } catch (e) {
          print("L·ªói khi m·ªü Hive box: $e");
          // N·∫øu kh√¥ng th·ªÉ m·ªü box, g·ªçi API ƒë·ªÉ l·∫•y puzzles
          return await getPuzzles(idToken);
        }
      }

      final box = await Hive.openBox<Puzzle>('puzzleBox');

      if (box.isNotEmpty) {
        final cachedPuzzles = box.values.toList();
        return Puzzles(puzzles: cachedPuzzles);
      }

      // N·∫øu kh√¥ng c√≥ trong cache, g·ªçi API ƒë·ªÉ l·∫•y puzzles
      print("Kh√¥ng t√¨m th·∫•y trong cache, g·ªçi API ƒë·ªÉ l·∫•y puzzle...");
      final puzzles = await getPuzzles(idToken);
      return puzzles;
    } catch (error) {
      print("L·ªói khi l·∫•y puzzle t·ª´ cache ho·∫∑c API: $error");
      // Th·ª≠ g·ªçi API tr·ª±c ti·∫øp n·∫øu c√≥ l·ªói v·ªõi cache
      try {
        return await getPuzzles(idToken);
      } catch (apiError) {
        throw Exception('Kh√¥ng th·ªÉ l·∫•y puzzle: $error. L·ªói API: $apiError');
      }
    }
  }

  Future<void> deletePuzzleFromCache(Puzzle puzzle) async {
    final String puzzleId = puzzle.puzzleId;
    try {
      final box = await Hive.openBox<Puzzle>('puzzleBox');
      await box.delete(puzzleId); // X√≥a puzzle theo puzzleId

      print("Puzzle v·ªõi ID: $puzzleId ƒë√£ b·ªã x√≥a kh·ªèi cache.");
    } catch (error) {
      print("L·ªói khi x√≥a puzzle kh·ªèi cache: $error");
      throw Exception('Kh√¥ng th·ªÉ x√≥a puzzle kh·ªèi cache: $error');
    }
  }

  Future<void> solvedPuzzle(String idToken, Puzzle puzzle) async {
    try {
      final solvedPuzzleUrlApi = "$getPuzzleUrlApi/${puzzle.puzzleId}/solved";

      final response = await http.post(
        Uri.parse(solvedPuzzleUrlApi),
        headers: {'Authorization': 'Bearer $idToken'},
      );

      print(response.body);

      if (response.statusCode == 200) {
        final newRating = jsonDecode(response.body)['newRating'];
        print("ƒêi·ªÉm Puzzle Rating m·ªõi c·ªßa b·∫°n sau khi gi·∫£i: $newRating");

        // Get the current user
        final userService = UserService();
        final user = await userService.getPlayer();

        if (user != null) {
          // Create a PuzzleProfile with the actual user ID and new rating
          final puzzleProfile = PuzzleProfile(
            userId: user.id,
            rating: newRating,
          );
          await updatePuzzleRating(newRating, puzzleProfile);

          // Print confirmation of updated profile
          print("Updated puzzle profile: userId=${user.id}, rating=$newRating");
        }
      } else {
        throw Exception(
            'Kh√¥ng th·ªÉ ƒë√°nh d·∫•u puzzle ƒë√£ gi·∫£i: ${response.statusCode}');
      }

      // X√≥a puzzle ƒë√£ gi·∫£i kh·ªèi cache
      await deletePuzzleFromCache(puzzle);

      print("ƒê√£ ƒë√°nh d·∫•u puzzle ${puzzle.puzzleId} l√† ƒë√£ gi·∫£i th√†nh c√¥ng");
    } catch (error) {
      print("L·ªói khi ƒë√°nh d·∫•u puzzle ƒë√£ gi·∫£i: $error");
      throw Exception('Kh√¥ng th·ªÉ ƒë√°nh d·∫•u puzzle ƒë√£ gi·∫£i: $error');
    }
  }

  Future<PuzzleProfile> getPuzzleProfile(String idToken) async {
    final response = await http.get(
      Uri.parse(getPuzzleProfileUrlApi),
      headers: {'Authorization': 'Bearer $idToken'},
    );

    if (response.statusCode == 200) {
      final Map<String, dynamic> responseData = jsonDecode(response.body);
      final puzzleProfile = PuzzleProfile.fromJson(responseData);
      await savePuzzleProfile(puzzleProfile);
      return puzzleProfile;
    }
    throw Exception('Kh√¥ng th·ªÉ l·∫•y profile puzzle: ${response.statusCode}');
  }

  Future<void> updatePuzzleRating(
      int newRating, PuzzleProfile puzzleProfile) async {
    final box = await Hive.openBox<PuzzleProfile>('puzzleProfileBox');
    await box.put(puzzleProfile.userId, puzzleProfile);
  }

  Future<void> deletePuzzleProfile(PuzzleProfile puzzleProfile) async {
    final box = await Hive.openBox<PuzzleProfile>('puzzleProfileBox');
    await box.delete(puzzleProfile.userId);
  }

  Future<void> savePuzzleProfile(PuzzleProfile puzzleProfile) async {
    final box = await Hive.openBox<PuzzleProfile>('puzzleProfileBox');
    await box.put(puzzleProfile.userId, puzzleProfile);
  }

  Future<int> getPuzzleRatingFromCache(UserModel user) async {
    final userId = user.id;
    final box = await Hive.openBox<PuzzleProfile>('puzzleProfileBox');
    final puzzleProfile = box.get(userId);
    if (puzzleProfile != null) {
      return puzzleProfile.rating;
    }
    return 0; // Tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t√¨m th·∫•y
  }

  Future<PuzzleProfile> getPuzzleRatingFromCacheOrAPI(String idToken) async {
    try {
      // Get current user ID
      final userService = UserService();
      final user = await userService.getPlayer();

      // Try to get from cache first
      if (user != null) {
        final box = await Hive.openBox<PuzzleProfile>('puzzleProfileBox');
        final cachedProfile = box.get(user.id);
        if (cachedProfile != null) {
          print("Found puzzle profile in cache: ${cachedProfile.rating}");
          return cachedProfile;
        }
      }

      // If not found in cache, fetch from API
      print("Fetching puzzle profile from API...");
      final apiProfile = await getPuzzleProfile(idToken);
      return apiProfile;
    } catch (error) {
      print("Error getting puzzle profile: $error");
      // If error occurs, try direct API call
      return await getPuzzleProfile(idToken);
    }
  }

  /// Clears all puzzle-related cached data
  /// Call this when a new user logs in
  Future<void> clearAllPuzzleCaches() async {
    try {
      // Clear puzzle profiles
      if (Hive.isBoxOpen('puzzleProfileBox')) {
        final profileBox =
            await Hive.openBox<PuzzleProfile>('puzzleProfileBox');
        await profileBox.clear();
        print("Puzzle profile cache cleared");
      }

      // Clear puzzles list
      if (Hive.isBoxOpen('puzzleBox')) {
        final puzzleBox = await Hive.openBox<Puzzle>('puzzleBox');
        await puzzleBox.clear();
        print("Puzzles cache cleared");
      }
    } catch (error) {
      print("Error clearing puzzle caches: $error");
    }
  }
}
